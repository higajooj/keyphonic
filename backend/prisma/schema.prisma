// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

enum CategoryEnum {
  PHONE
  KEYBOARD
  OTHER
}

model Product {
  id String @id @default(uuid())

  name        String
  description String
  price       Int
  qtd         Int
  category    CategoryEnum
  galery      String[]

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  OrderItem OrderItem[]

  @@map("products")
}

model Address {
  id String @id @default(uuid())

  street       String
  number       String
  neighborhood String
  zip_code     String
  complement   String?
  city         String
  state        String

  isActive Boolean @default(true) @map("is_active")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Order     Order[]
}

model OrderItem {
  id String @id @default(uuid())

  qtd   Int
  price Int @map("price")

  orderId   String
  productId String

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum PaymentMethodEnum {
  CREDIT_CARD
  DEBIT_CARD
  CASH
}

enum StatusEnum {
  PENDING
  COMPLETED
  REFUSED
}

model Order {
  id String @id @default(uuid())

  addressId     String
  paymentMethod PaymentMethodEnum
  delivery_fee  Int
  total         Int
  qtd           Int               @default(1)
  status        StatusEnum        @default(PENDING)

  address   Address     @relation(fields: [addressId], references: [id])
  OrderItem OrderItem[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}
